plot.subtitle = element_text(hjust = .5, size = 12),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
d %>%
filter(subnum == 48 | subnum == 28 | subnum == 32) %>%
filter(target_type == 'incongruous') %>%
filter(rt > mean(d$rt)+(3*sd(d$rt))) %>%
select(Subnum = subnum, Condition = target_type, rt, Accuracy = accuracy) %>%
arrange(desc(rt)) %>%
kable()
cutoff_item_accuracy = .63
discontinuity_lower_bound = d %>%
filter(target_id == 93) %>%
summarise(mean(accuracy, na.rm = TRUE)) %>%
as.numeric()
discontinuity_upper_bound = d %>%
filter(target_id == 20) %>%
summarise(mean(accuracy)) %>%
as.numeric()
d %>%
group_by(target_id) %>%
summarise(mean_accuracy = mean(accuracy)) %>%
mutate(below_cutoff = ifelse(mean_accuracy < cutoff_item_accuracy, TRUE, FALSE)) %>%
ggplot(aes(mean_accuracy,
reorder(target_id, desc(mean_accuracy)),
fill = below_cutoff)) +
geom_label(aes(label = target_id),
size = 2,
position = position_jitter(width=.02, height=.02)) +
geom_rect(xmin = discontinuity_lower_bound,
xmax = discontinuity_upper_bound, ymin = 0, ymax = Inf,
linetype = 'dotted', color = 'pink',
fill = 'gray85', alpha = .011) +
labs(x = "Mean accuracy",
title = "Mean accuracy by target",
subtitle = "Points = target id, blue = outliers",
fill = "Cutoff < .63") +
theme(plot.title = element_text(hjust = .5, size = 17),
plot.subtitle = element_text(hjust = .5, size = 15),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
d %>%
group_by(target_id) %>%
summarise(mean_accuracy = mean(accuracy)) %>%
filter(mean_accuracy < .63) %>%
select(outlier_targets = target_id) -> outlier_targets_by_accuracy
outlier_targets_by_accuracy = as.numeric(outlier_targets_by_accuracy$outlier_targets)
d %>%
group_by(target_id) %>%
summarise(`Target` = first(target),
Condition = first(target_type),
`Mean accuracy` = mean(accuracy),
`Target gloss` = first(target_gloss)) %>%
filter(`Mean accuracy` <= cutoff_item_accuracy) %>%
arrange(desc(`Mean accuracy`)) %>%
mutate(`Mean accuracy` = round(`Mean accuracy`, digits = 2)) %>%
select(-target_id) %>%
kable()
d %>%
group_by(target_id) %>%
summarise(rt_mean = mean(rt)) %>%
filter(target_id == 19) %>%
select(rt_mean) %>%
as.numeric() -> cutoff_item_rt
d %>%
group_by(target_id) %>%
summarise(rt_mean = mean(rt),
rt_sd = sd(rt)) %>%
mutate(above_cutoff = ifelse(rt_mean > cutoff_item_rt, TRUE, FALSE)) %>%
ggplot(aes(y = rt_mean,
x = reorder(target_id, desc(rt_mean)))) +
#geom_label(aes(label = target_id),
#         size = 1.8,
#        position = position_jitter(width=.02, height=.02)) +
geom_point(aes(color = above_cutoff)) +
geom_errorbar(aes(ymin = rt_mean - rt_sd, ymax = rt_mean + rt_sd)) +
coord_flip() +
labs(x = 'Target ID', y = "Mean RT (bars are SDs)",
title = "Mean RT by target",
subtitle = paste("Points = target ID"),
color = paste("Outliers >", round(cutoff_item_rt, digits = 2), sep = '')) +
theme(plot.title = element_text(hjust = .5, size = 17),
plot.subtitle = element_text(hjust = .5, size = 15),
axis.text.y = element_text(size = 2))
d %>%
group_by(target_id, target_type) %>%
summarise(`Target` = first(target),
Condition = first(target_type),
`RT (mean)` = mean(rt),
`RT (SD)` = sd(rt),
`Target gloss` = first(target_gloss)) %>%
filter(`RT (mean)` > cutoff_item_rt) %>%
arrange(desc(`RT (mean)`)) %>%
rename(ID = target_id) %>%
kable()
d %>%
ggplot(aes(rt)) +
geom_histogram(binwidth = 100, color = 'purple4', fill = 'pink') +
geom_vline(xintercept = mean(d$rt), color = 'black', linetype = 'dashed')  +
geom_vline(xintercept = mean(d$rt)+(3*sd(d$rt)),
color = 'red') +
theme()
d %>%
filter(rt > mean(d$rt)+(3*sd(d$rt))) %>%
group_by(target_type) %>%
summarise(`# excluded obs` = n()) %>%
mutate(Condition = toupper(target_type)) %>%
select(Condition, `# excluded obs`) %>%
kable()
d %>%
filter(rt > mean(d$rt)+(3*sd(d$rt))) %>%
group_by(target_type) %>%
summarise(`# excluded obs` = n()) %>%
rename(Condition = target_type) %>%
select(Condition, `# excluded obs`) %>%
kable()
d %>%
arrange(-desc(rt)) %>%
filter(rt < 500) %>%
ggplot(aes(rt)) +
geom_histogram(binwidth = 2, color = 'black', fill = 'pink') +
geom_vline(xintercept = 300, color = 'red')
d %>%
filter(rt < 300) %>%
group_by(target_type) %>%
summarise(n = n()) %>%
rename(condition = target_type) %>%
mutate(condition = toupper(condition)) %>%
kable()
d %>%
filter(rt < 300) %>%
group_by(target_type) %>%
summarise(n = n()) %>%
rename(condition = target_type) %>%
kable()
# finalize cutoffs for outliers:
high_cutoff_rt = mean(d$rt)+(3*sd(d$rt))
low_cutoff_rt = 300
rm(cutoff_item_rt, cutoff_item_accuracy)
# let's save the outlier assignments in a variable
d = d %>%
mutate(outlier = ifelse(subnum %in% outlier_participants_by_accuracy | target_id %in% outlier_targets_by_accuracy | rt > high_cutoff_rt | rt < low_cutoff_rt, TRUE, FALSE))
COLORS = c("overall_related" = "salmon", "incongruous" = "red3", "unrelated" = "goldenrod1", "radical_only" = "grey23")
positions = c("radical_only", "overall_related", "incongruous", "unrelated")
# generate data with points (one per participant per condition)
d %>%
filter(outlier == FALSE) %>%
group_by(target_type, subnum) %>%
summarise(mean_accuracy = mean(accuracy)) -> d_plot
# generate summary data to plot means and bars:
d_plot %>%
group_by(target_type) %>%
summarise(mean_accuracy = round(mean_se(mean_accuracy)[1], digits = 3),
se_min = NA,
se_max = NA) -> d_plot_bars
# the made for function mean_se is having trouble generating the se_min and se_max within piped structures, so compute them directly (even though this code sucks):
# radical_only condition
# overall_related condition:
# se_min:
d_plot_bars$se_min[which(d_plot_bars$target_type == "radical_only")] <- mean_se(d_plot$mean_accuracy[which(d_plot$target_type == "radical_only")])[2]
# se_max:
d_plot_bars$se_max[which(d_plot_bars$target_type == "radical_only")] <- mean_se(d_plot$mean_accuracy[which(d_plot$target_type == "radical_only")])[3]
# overall_related condition:
# se_min:
d_plot_bars$se_min[which(d_plot_bars$target_type == "overall_related")] <- mean_se(d_plot$mean_accuracy[which(d_plot$target_type == "overall_related")])[2]
# se_max:
d_plot_bars$se_max[which(d_plot_bars$target_type == "overall_related")] <- mean_se(d_plot$mean_accuracy[which(d_plot$target_type == "overall_related")])[3]
# incongruous condition:
# se_min:
d_plot_bars$se_min[which(d_plot_bars$target_type == "incongruous")] <- mean_se(d_plot$mean_accuracy[which(d_plot$target_type == "incongruous")])[2]
# se_max:
d_plot_bars$se_max[which(d_plot_bars$target_type == "incongruous")] <- mean_se(d_plot$mean_accuracy[which(d_plot$target_type == "incongruous")])[3]
# unrelated condition:
# se_min:
d_plot_bars$se_min[which(d_plot_bars$target_type == "unrelated")] <- mean_se(d_plot$mean_accuracy[which(d_plot$target_type == "unrelated")])[2]
# se_max:
d_plot_bars$se_max[which(d_plot_bars$target_type == "unrelated")] <- mean_se(d_plot$mean_accuracy[which(d_plot$target_type == "unrelated")])[3]
# the plot for accuracy:
#specify the order of the bars:
ggplot(d_plot_bars, aes(x = target_type, y = mean_accuracy)) +
geom_bar(data = d_plot_bars, mapping = aes(fill = target_type, x=target_type, y=mean_accuracy), stat = "identity", width = .8) +
geom_text(aes(label = round(mean_accuracy, digits = 2)), vjust = 6, size = 11) +
geom_point(data = d_plot, aes(y = mean_accuracy, x = target_type), colour='darkgrey', position = position_jitter(w = .1), size = 1) +
geom_errorbar(data = d_plot_bars, aes(y = mean_accuracy, x = target_type, ymin = se_min, ymax = se_max), stat="identity", width=0.3) +
labs(y = 'Accuracy (as proportion)', x = 'Condition') +
guides(fill = FALSE) +
scale_fill_manual(values = COLORS) +
scale_x_discrete(limits = positions) +
theme(legend.position = 'none')
# we will exclude the "radical only" condition for the visuals to make it cleaner
d %>%
filter(outlier == FALSE) %>%
filter(accuracy == 1) -> d_plot
d %>%
filter(outlier == FALSE) %>%
filter(accuracy == 1) %>%
group_by(target_type) %>%
summarise(mean_rt = round(mean_se(rt)[1], digits = 0),
se_min = mean_se(rt)[2],
se_max = mean_se(rt)[3]) -> d_plot_bars
ggplot(d_plot_bars, aes(x = target_type, y = mean_rt)) +
geom_bar(data = d_plot_bars, mapping = aes(fill = target_type, x=target_type, y=mean_rt), stat = "identity", width = .8) +
geom_text(aes(label = mean_rt), vjust = 3.5, size = 9) +
geom_point(data = d_plot, aes(y = rt, x = target_type), colour='darkgrey', position = position_jitter(w = .1), size = .1) +
geom_errorbar(data = d_plot_bars, aes(y = mean_rt, x = target_type, ymin = se_min, ymax = se_max), stat="identity", width=0.3) +
labs(y = 'RT', x = 'Condition') +
ylim(0, 2000) +
scale_fill_manual(values = COLORS) +
scale_x_discrete(limits = positions) +
theme(legend.position = 'none')
# we will exclude the "radical only" condition for the visuals to make it cleaner
d %>%
filter(outlier == FALSE) %>%
filter(accuracy == 1) -> d_plot
d %>%
filter(outlier == FALSE) %>%
filter(accuracy == 1) %>%
group_by(target_type) %>%
summarise(mean_rt = round(mean_se(rt)[1], digits = 0),
se_min = mean_se(rt)[2],
se_max = mean_se(rt)[3]) -> d_plot_bars
ggplot(d_plot_bars, aes(x = target_type, y = mean_rt)) +
geom_bar(data = d_plot_bars, mapping = aes(fill = target_type, x=target_type, y=mean_rt), stat = "identity", width = .8) +
geom_text(aes(label = mean_rt), vjust = 3.5, size = 9) +
geom_point(data = d_plot, aes(y = rt, x = target_type), colour='darkgrey', position = position_jitter(w = .1), size = .1) +
geom_errorbar(data = d_plot_bars, aes(y = mean_rt, x = target_type, ymin = se_min, ymax = se_max), stat="identity", width=0.3) +
labs(y = 'RT', x = 'Condition') +
ylim(0, 2000) +
scale_fill_manual(values = COLORS) +
scale_x_discrete(limits = positions) +
theme(legend.position = 'none')
names(d)
length(unique(d$target_id))
length(unique(d$target))
114/4
length(unique(d$target_gloss))
View(d)
d %>%
filter(target_id == 'o3' | target_id == 's15')
d %>%
filter(item == 'o3' | item == 's15')
length(unique(d$target))
length(unique(d$target_type))
length(unique(d$item))
136/4
136-114
d %>%
group_by(item) %>%
summarise(character = target)
d %>%
group_by(item) %>%
summarise(character = first(target))
d %>%
group_by(item) %>%
summarise(character = first(target)) %>%
write.csv('~/Desktop/items.csv')
d %>%
group_by(item) %>%
summarise(character = first(target)) %>%
write.csv('~/Desktop/items.txt')
d %>%
group_by(target) %>%
summarise(character = first(target)) %>%
write.csv('~/Desktop/targets.txt')
d %>%
group_by(target) %>%
summarise(character = first(target)) %>%
select(character) %>%
write.csv('~/Desktop/targets.txt', row.names = F)
d %>%
filter(target_type != 'radical_only') %>%
group_by(target) %>%
summarise(character = first(target)) %>%
select(character) %>%
write.csv('~/Desktop/targets.txt', row.names = F)
d %>%
filter(target_type != 'radical_only') %>%
group_by(target) %>%
summarise(character = first(target)) %>%
select(character) -> tmp
length(unique(tmp))
length(unique(tmp$character))
View(d_plot_bars)
d %>%
group_by(target_id, target_type) %>%
summarise(`Target` = first(target),
Condition = first(target_type),
`RT (mean)` = mean(rt),
`RT (SD)` = sd(rt),
`Target gloss` = first(target_gloss)) %>%
filter(`RT (mean)` > cutoff_item_rt) %>%
arrange(desc(`RT (mean)`)) %>%
rename(ID = target_id) %>%
ungroup() %>%
select(-target_type) %>%
kable()
knitr::opts_chunk$set(echo = TRUE)
packages = read.csv('requirements.txt', header = F)[[1]]
lapply(packages, require, ch = T)
load('./data/data.Rda')
source('./scripts/logits.R')
outlier_participants_by_accuracy = c(3, 46)
outlier_targets_by_accuracy = c(16, 19, 93, 94)
high_cutoff_rt = 2742.114
low_cutoff_rt = 300
d = d %>%
mutate(outlier = ifelse(subnum %in% outlier_participants_by_accuracy | target_id %in% outlier_targets_by_accuracy | rt > high_cutoff_rt | rt < low_cutoff_rt, TRUE, FALSE))
d %>%
filter(outlier == F) %>%
group_by(target_type) %>%
summarise(Accuracy = mean(accuracy),
SD = sd(accuracy)) %>%
kable()
unique(d$target_type)
# this script is included only as a copy and
# clean procedure from the source data in cloud.
# run this script to copy data for inclusion
# in github repository (to avoid conflicts between
# git and lab's cloud repo)
load(file = '../../../data/src2/clean/src2.rda')
save(d, file = '../data/data.Rda')
rm(d)
knitr::opts_chunk$set(echo = TRUE)
packages = read.csv('requirements.txt', header = F)[[1]]
lapply(packages, require, ch = T)
load('./data/data.Rda')
source('./scripts/logits.R')
unique(d$target_type)
load(file = '../../../data/src2/clean/src2.rda')
load(file = '../../data/SRC2/clean/src2.rda')
save(d, file = '../data/data.Rda')
load(file = '../../data/SRC2/clean/src2.rda')
save(d, file = '../data/data.Rda')
save(d, file = 'data/data.Rda')
rm(d)
knitr::opts_chunk$set(echo = TRUE)
packages = read.csv('requirements.txt', header = F)[[1]]
lapply(packages, require, ch = T)
load('./data/data.Rda')
source('./scripts/logits.R')
outlier_participants_by_accuracy = c(3, 46)
outlier_targets_by_accuracy = c(16, 19, 93, 94)
high_cutoff_rt = 2742.114
low_cutoff_rt = 300
d = d %>%
mutate(outlier = ifelse(subnum %in% outlier_participants_by_accuracy | target_id %in% outlier_targets_by_accuracy | rt > high_cutoff_rt | rt < low_cutoff_rt, TRUE, FALSE))
d %>%
filter(outlier == F) %>%
group_by(target_type) %>%
summarise(Accuracy = mean(accuracy),
SD = sd(accuracy)) %>%
kable()
focal_conditions = c('unrelated', 'incongruous')
model_accuracy = d %>%
filter(outlier == F) %>%
filter(target_type %in% focal_conditions) %>%
mutate(condition = case_when(target_type == 'incongruous' ~ 1, TRUE ~ 0)) %>%
glmer(accuracy  ~ condition + (1 | subnum) + (1 | target_id), family = 'binomial', data = .)
summary(model_accuracy)
# probabiliity difference between conditions:
predictor_probability(model_accuracy, 'condition', return_unit_difference = T)
x = expand.grid(condition = c(0, 1))
y = predictSE(model_accuracy, newdata = x, se.fit = TRUE, type = "response")
predictions = cbind(x, y) %>%
mutate(condition = case_when(condition == 0 ~ 'Unrelated',
TRUE ~ 'Incongruous')) %>%
rename(Condition = condition,
Probability = fit,
SE = se.fit)
plot_data = d %>%
filter(outlier == FALSE) %>%
filter(target_type %in% focal_conditions) %>%
group_by(subnum, target_type) %>%
summarise(Probability = mean(accuracy)) %>%
ungroup() %>%
mutate(target_type = recode(target_type, 'incongruous' = 'Incongruous', 'unrelated' = 'Unrelated')) %>%
rename(Condition = target_type,
Participant = subnum)
COLORS = c('Incongruous' = 'firebrick', 'Unrelated' = 'goldenrod')
predictions %>%
ggplot(aes(Condition, Probability, fill = Condition)) +
geom_bar(stat = 'identity', width = .75) +
geom_errorbar(aes(ymin = Probability - SE, ymax = Probability + SE),
width = .2) +
scale_fill_manual(values = COLORS) +
geom_point(data = plot_data, size = .5, color = 'grey26', position = position_jitter(width = .03, height = .02)) +
coord_cartesian(ylim = c(.7, 1.03)) +
labs(y = 'Proportion correct') +
expand_limits(y = 20) +
theme_classic() +
theme(legend.position = 'none')
model_accuracy_ = d %>%
filter(target_type %in% focal_conditions) %>%
mutate(condition = case_when(target_type == 'incongruous' ~ 1, TRUE ~ 0)) %>%
glmer(accuracy ~ condition + (1 | subnum) + (1 | target_id), family = 'binomial', data = ., control=glmerControl(optCtrl=list(boundary.tol = 1e-5)))
summary(model_accuracy_)
d %>%
filter(outlier == F) %>%
filter(accuracy == 1) %>%
group_by(target_type) %>%
summarise(RT = mean(rt),
SD = sd(rt),
max_ = max(rt),
min_ = min(rt)) %>%
knitr::kable()
model_rt = d %>%
filter(outlier == F) %>%
filter(accuracy == 1) %>%
filter(target_type %in% focal_conditions) %>%
mutate(condition = case_when(target_type == 'incongruous' ~ 1, TRUE ~ 0)) %>%
lmer(rt  ~ condition + (1 | subnum) + (1 | target_id), data = .)
summary(model_rt)
anova_rt = car::Anova(model_rt, type=3, test = "F")
anova_rt
x = expand.grid(condition = c(0, 1))
y = predictSE(model_rt, newdata = x, se.fit = TRUE, type = "response")
predictions = cbind(x, y) %>%
mutate(condition = case_when(condition == 0 ~ 'Unrelated',
TRUE ~ 'Incongruous'),
RT_ = round(fit, digits = 2)) %>%
rename(Condition = condition,
RT = fit,
SE = se.fit)
plot_data = d %>%
filter(outlier == FALSE) %>%
filter(accuracy == 1) %>%
filter(target_type %in% focal_conditions) %>%
mutate(target_type = recode(target_type, 'incongruous' = 'Incongruous', 'unrelated' = 'Unrelated')) %>%
select(Condition = target_type, RT = rt)
COLORS = c('Incongruous' = 'firebrick', 'Unrelated' = 'goldenrod')
predictions %>%
ggplot(aes(Condition, RT, fill = Condition)) +
geom_bar(stat = 'identity', width = .75) +
scale_fill_manual(values = COLORS) +
geom_point(data = plot_data, size = .01, color = 'grey26',
position = position_jitter(width = .03, height = .02)) +
geom_errorbar(aes(ymin = RT - SE, ymax = RT + SE),
width = .2) +
geom_text(aes(label = RT_, vjust = 7, size = 9)) +
labs(y = 'Response time (ms)') +
expand_limits(y = 20) +
theme_classic() +
theme(legend.position = 'none')
model_rt = d %>%
filter(accuracy == 1) %>%
filter(target_type %in% focal_conditions) %>%
mutate(condition = case_when(target_type == 'incongruous' ~ 1, TRUE ~ 0)) %>%
lmer(rt  ~ condition + (1 | subnum) + (1 | target_id), data = .)
summary(model_rt)
anova_rt = car::Anova(model_rt, type=3, test = "F")
anova_rt
model_rt_including_outliers = d %>%
filter(accuracy == 1) %>%
filter(target_type %in% focal_conditions) %>%
mutate(condition = case_when(target_type == 'incongruous' ~ 1, TRUE ~ 0)) %>%
lmer(rt  ~ condition + (1 | subnum) + (1 | target_id), data = .)
summary(model_rt_including_outliers)
anova_rt = car::Anova(model_rt_including_outliers, type=3, test = "F")
anova_rt
model_accuracy_outliers_included = d %>%
filter(target_type %in% focal_conditions) %>%
mutate(condition = case_when(target_type == 'incongruous' ~ 1, TRUE ~ 0)) %>%
glmer(accuracy ~ condition + (1 | subnum) + (1 | target_id), family = 'binomial', data = ., control=glmerControl(optCtrl=list(boundary.tol = 1e-5)))
summary(model_accuracy_outliers_included)
1e-5
options(scipen = 100)
1e-5
model_accuracy_outliers_included = d %>%
filter(target_type %in% focal_conditions) %>%
mutate(condition = case_when(target_type == 'incongruous' ~ 1, TRUE ~ 0)) %>%
glmer(accuracy ~ condition + (1 | subnum) + (1 | target_id), family = 'binomial', data = ., control=glmerControl(optCtrl=list(boundary.tol = 1e-6)))
summary(model_accuracy_outliers_included)
model_accuracy_outliers_included = d %>%
filter(target_type %in% focal_conditions) %>%
mutate(condition = case_when(target_type == 'incongruous' ~ 1, TRUE ~ 0)) %>%
glmer(accuracy ~ condition + (1 | subnum) + (1 | target_id), family = 'binomial', data = ., control=glmerControl(optCtrl=list(boundary.tol = 1e-6)))
ss = getME(model_accuracy_outliers_included, c('theta', 'fixef'))
model_accuracy_outliers_included2 = update(model_accuracy_outliers_included, start = ss)
sum(is.na(d$accuracy))
length(d$accuracy)
model_accuracy_outliers_included = d %>%
filter(target_type %in% focal_conditions) %>%
mutate(condition = case_when(target_type == 'incongruous' ~ 1, TRUE ~ 0)) %>%
glmer(accuracy ~ condition + (1 | subnum) + (1 | target_id), family = 'binomial', data = ., control=glmerControl(optCtrl=list(boundary.tol = 1e-7)))
summary(model_accuracy_outliers_included2)
d %>%
filter(target_type %in% focal_conditions) %>%
group_by(subnum, target_type) %>%
summarise(acccuracy = mean(acccuracy)) %>%
lm(accuracy ~ target_type, data = .) -> m
d %>%
filter(target_type %in% focal_conditions) %>%
group_by(subnum, target_type) %>%
summarise(accuracy = mean(accuracy)) %>%
lm(accuracy ~ target_type, data = .) -> m
summary(m)
d %>%
filter(target_type %in% focal_conditions) %>%
filter(outlier == F) %>%
group_by(subnum, target_type) %>%
summarise(accuracy = mean(accuracy)) %>%
lm(accuracy ~ target_type, data = .) -> m
summary(m)
d %>%
filter(target_type %in% focal_conditions) %>%
filter(outlier == F) %>%
group_by(subnum, target_type) %>%
summarise(accuracy = mean(accuracy)) %>%
lm(accuracy ~ target_type, data = .) %>%
summary()
